# .github/workflows/reusable-ci-summary.yml

name: Reusable CI Summary Reporter

on:
  workflow_call:
    inputs:
      status:
        required: true
        type: string
      tests_passed:
        required: true
        type: string
      tests_failed:
        required: true
        type: string
      coverage:
        required: true
        type: string

jobs:
  generate-and-post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Track job duration
        id: timing
        run: echo "duration=$(($SECONDS))" >> $GITHUB_OUTPUT

      - name: Upload logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: |
            build.log
            test.log
        continue-on-error: true

      - name: Get artifact URL
        id: artifact_url
        run: echo "url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Generate Markdown summary
        run: |
          python scripts/generate_ci_summary.py \
            --status "${{ inputs.status }}" \
            --job "${{ github.job }}" \
            --workflow "${{ github.workflow }}" \
            --run_id "${{ github.run_id }}" \
            --actor "${{ github.actor }}" \
            --repo "${{ github.repository }}" \
            --ref "${{ github.ref }}" \
            --sha "${{ github.sha }}" \
            --tests_passed ${{ inputs.tests_passed }} \
            --tests_failed ${{ inputs.tests_failed }} \
            --coverage ${{ inputs.coverage }} \
            --duration ${{ steps.timing.outputs.duration }} \
            --artifacts_url "${{ steps.artifact_url.outputs.url }}"

      - name: Debug Actor
        run: echo "Actor is ${{ github.actor }} and token is set = ${{ secrets.BOT_CI != '' }}"

      - name: Post or Update PR Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.BOT_CI || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('ci-summary.md', 'utf8');
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const existing = comments.data.find(c => c.body.includes('CI Summary'));
            if (existing) {
              await github.rest.issues.updateComment({
                comment_id: existing.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
